apply plugin: 'java'

task cleanLibs(type: Delete) {
  delete 'build/lib', 'build/lib-test'
}

task libsProd(type: Sync) {
  from configurations.compile
  into "build/lib"
}

task libsTest(type: Sync) {
  from configurations.testRuntime
  into "build/lib-test"
}

task deps {}
compileJava.dependsOn deps
deps.dependsOn(['cleanLibs', 'libsProd', 'libsTest'])

repositories {
  jcenter()
  ivy {
    url uri('https://repo.codeborne.com')
    layout "pattern", {
      artifact "/com.google.inject/[module]/[module]-[revision].[ext]"
    }
  }
}

compileJava {
  options.debugOptions.debugLevel = "source,lines,vars"
  options.fork = true
  options.compilerArgs << '-parameters'
  options.encoding = 'UTF-8'
}

sourceSets {
  main {
    java {srcDir "app"}
    resources {srcDirs "conf", "app"}
  }
  test {
    java {srcDir "test"}
    resources {srcDir "test"}
  }
}

dependencies {
  implementation('com.codeborne.replay:framework:1.7')
  implementation('com.codeborne.replay:fastergt:1.7')
  implementation('com.codeborne.replay:guice:1.7')
  implementation('org.apache.httpcomponents:httpclient:4.5.12')
  implementation('org.apache.httpcomponents:fluent-hc:4.5.12')

  testImplementation('org.assertj:assertj-core:3.16.1')
  testImplementation('com.codeborne:selenide:5.1.0')
  testImplementation('junit:junit:4.13')
  testImplementation('org.mockito:mockito-core:3.3.3')
  testImplementation('org.subethamail:subethasmtp:3.1.7') {transitive false}
  testImplementation('com.github.tomakehurst:wiremock:2.25.0')
}

test {
  exclude 'ui/**'
}

task uitest(type: Test) {
  include 'ui/**/*'
  systemProperties['BUILD_URL'] = System.getenv()['BUILD_URL']
}

tasks.withType(Test).all { testTask ->
  testTask.systemProperties['file.encoding'] = 'UTF-8'
  testTask.testLogging {exceptionFormat = 'full'}
  testTask.outputs.upToDateWhen { false }
}

